{"version":3,"sources":["store/reducer.js","components/counter.comp.js","services/auth.service.js","services/users.service.js","components/login/login.comp.js","components/register/register.comp.js","components/rstpPlayer/rstpPlayer.comp.js","App.js","serviceWorker.js","index.js"],"names":["initialState","login","reducer","state","action","type","ButtonCounter","updateCounter","setState","count","props","onClick","this","onIncrementCounter","React","Component","connect","ctr","counter","dispatch","onDecrementCounter","onAddCounter","onSubtractCounter","Auth","user","JSON","parse","localStorage","getItem","token","Users","auth","config","apiUrl","requestOptions","method","headers","authHeader","fetch","response","json","data","console","log","email","password","body","stringify","res","setItem","LogInComp","handleEmailChange","event","target","value","handlePasswordChange","handleSubmit","a","preventDefault","users","Container","Row","className","Col","lg","onSubmit","onChange","placeholder","RegisterComp","handleUsernameChange","name","register","RstpPlayer","scrolling","width","height","src","App","path","render","Boolean","window","location","hostname","match","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.db5fc008.chunk.js","sourcesContent":["const initialState = {\n    login: false\n};\n\nconst reducer = (state = initialState, action) => {\n    if (action.type === 'LOGIN') {\n        return {\n            login: true\n        }\n    }\n    if (action.type === 'LOGOUT') {\n        return {\n            login: false\n        }\n    }\n    return state;\n};\n\nexport default reducer;","import React from 'react'\nimport { connect } from 'react-redux';\n\nclass ButtonCounter extends React.Component{\n    // constructor(props){\n    //     super(props);\n    //     this.state = {\n    //         count: 0\n    //     };\n    // }\n    updateCounter = () => {\n        this.setState({\n            count: this.state.count + 1\n        });\n    }\n    render(props){\n        return(\n            <div>\n                <button onClick={this.props.onIncrementCounter}>click on me</button>\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        ctr: state.counter\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onIncrementCounter: () => dispatch({type: 'INCREMENT'}),\n        onDecrementCounter: () => dispatch({type: 'DECREMENT'}),\n        onAddCounter: () => dispatch({type: 'ADD'}),\n        onSubtractCounter: () => dispatch({type: 'SUBTRACT'})\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ButtonCounter);","export default class Auth{\n    \n    constructor(){\n\n    }\n\n    authHeader() {\n        // return authorization header with jwt token\n        let user = JSON.parse(localStorage.getItem('user'));\n    \n        if (user && user.token) {\n            return { 'Authorization': 'Bearer ' + user.token };\n        } else {\n            return {};\n        }\n    }\n}","import Auth from './auth.service'\nexport default class Users {\n    constructor() {\n        this.auth = new Auth();\n        this.config = {apiUrl : \"http://localhost:3888\"}; \n    }\n\n    async getUsers() {\n        try {\n            const requestOptions = {\n                method: 'GET',\n                headers: this.auth.authHeader()\n            };\n            const response = await fetch(`${this.config.apiUrl}/users`, requestOptions);\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    async login(email, password) {\n        const requestOptions = {\n            method: 'POST',\n            headers: {\"Content-Type\" :\"application/json\"},\n            body: JSON.stringify({ email, password })\n        };\n        try {\n            const res = await fetch(`${this.config.apiUrl}/users/login`, requestOptions);\n            const user = await res.json();\n            const data = await JSON.stringify(user);\n            localStorage.setItem('user', data);\n            return user;\n        } catch (error) {\n            return error;\n        }\n    }\n\n    async getCurrentUser() {\n        try {\n            const requestOptions = {\n                method: 'GET',\n                headers: this.auth.authHeader()\n            };\n            const response = await fetch(`${this.config.apiUrl}/users/me`, requestOptions);\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.log(error);\n            return error;\n        }\n\n    }\n\n    // async logout() {\n    //     const requestOptions = {\n    //         method: 'POST',\n    //         headers: this.auth.authHeader(),\n    //         body: JSON.stringify({ email, password })\n    //     };\n    //     try {\n    //         localStorage.removeItem('user');\n    //         const res = await fetch(`${this.config.apiUrl}/users/me/logout`, requestOptions)\n    //         localStorage.setItem('user', JSON.stringify(user));\n    //     } catch (error) {\n    //         return error;\n    //     }\n    //     // remove user from local storage to log user out\n    // }\n\n    async register(user) {\n        const requestOptions = {\n            method: 'POST',\n            headers: {\"Content-Type\" :\"application/json\"},\n            body: JSON.stringify(user)\n        };\n        try {\n            let res = await fetch(`${this.config.apiUrl}/users`, requestOptions);\n            res = await res.json();\n            return res;\n        } catch (error) {\n            return error;\n        }\n    }\n\n}\n","\nimport React from 'react'\nimport { connect } from 'react-redux';\nimport './login.css'\nimport { Container, Row, Col } from 'react-bootstrap';\nimport Users from '../../services/users.service'\nclass LogInComp extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            email: '',\n            password: ''\n        };\n        this.users = new Users();\n    }\n\n    handleEmailChange = (event) =>{\n        this.setState({email:event.target.value});\n    }\n    handlePasswordChange = (event) =>{\n        this.setState({password:event.target.value});\n    }\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        console.log(this.state.email,this.state.password);\n        const res = await this.users.login(this.state.email,this.state.password);\n        console.log(res);\n    }\n\n    render() {\n        return (\n            <Container>\n                  <Row className=\"justify-content-center\">\n                    <Col lg=\"6\">\n                        <div className=\"card o-hidden border-0 shadow-lg my-5\">\n                            <div className=\"card-body p-0\">\n                                <Row>\n                                    <Col lg=\"12\">\n                                        <div className=\"p-5\">\n                                            <form className=\"user\" onSubmit={this.handleSubmit}>\n                                                <div className=\"form-group\">\n                                                    <input type=\"text\" className=\"form-control form-control-user\" value={this.state.email} onChange={this.handleEmailChange} placeholder=\"Enter Email Address...\" />\n                                                </div>\n                                                <div className=\"form-group\">\n                                                    <input type=\"password\" className=\"form-control form-control-user\" value={this.state.password} onChange={this.handlePasswordChange} placeholder=\"Password\" />\n                                                </div>\n                                                <h5 className=\"loginStatus\"></h5>\n                                                <button className=\"btn btn-primary btn-user btn-block\" type=\"submit\">Login</button>\n                                            </form>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            </div>\n                        </div>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        ctr: state.counter\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onIncrementCounter: () => dispatch({ type: 'INCREMENT' }),\n        onDecrementCounter: () => dispatch({ type: 'DECREMENT' }),\n        onAddCounter: () => dispatch({ type: 'ADD' }),\n        onSubtractCounter: () => dispatch({ type: 'SUBTRACT' })\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LogInComp);\n\n","\nimport React from 'react'\nimport { connect } from 'react-redux';\nimport './register.css'\nimport { Container, Row, Col } from 'react-bootstrap';\nimport Users from '../../services/users.service'\n\nclass RegisterComp extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            email: '',\n            password: '',\n            name:''\n        };\n        this.users = new Users();\n    }\n    handleEmailChange = (event) =>{\n        this.setState({email:event.target.value});\n    }\n    handlePasswordChange = (event) =>{\n        this.setState({password:event.target.value});\n    }\n    handleUsernameChange = (event) =>{\n        this.setState({name:event.target.value});\n    }\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        console.log(this.state.email,this.state.password);\n        const user = {\n            name: this.state.name,\n            email: this.state.email,\n            password: this.state.password\n        };\n        const res = await this.users.register(user);\n        console.log(res);\n    }\n    render() {\n        return (\n            <Container>\n                  <Row className=\"justify-content-center\">\n                    <Col lg=\"6\">\n                        <div className=\"card o-hidden border-0 shadow-lg my-5\">\n                            <div className=\"card-body p-0\">\n                                <Row>\n                                    <Col lg=\"12\">\n                                        <div className=\"p-5\">\n                                            <form className=\"user\" onSubmit={this.handleSubmit}>\n                                                <div className=\"form-group\">\n                                                    <input type=\"text\" className=\"form-control form-control-user\" value={this.state.email} onChange={this.handleEmailChange} placeholder=\"Enter Email Address...\" />\n                                                </div>\n                                                <div className=\"form-group\">\n                                                    <input type=\"password\" className=\"form-control form-control-user\" value={this.state.password} onChange={this.handlePasswordChange} placeholder=\"Password\" />\n                                                </div>\n                                                <div className=\"form-group\">\n                                                    <input type=\"text\" className=\"form-control form-control-user\" value={this.state.name} onChange={this.handleUsernameChange} placeholder=\"User name\" />\n                                                </div>\n                                                <h5 className=\"loginStatus\"></h5>\n                                                <button className=\"btn btn-primary btn-user btn-block\" type=\"submit\">Register</button>\n                                            </form>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            </div>\n                        </div>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        ctr: state.counter\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onIncrementCounter: () => dispatch({ type: 'INCREMENT' }),\n        onDecrementCounter: () => dispatch({ type: 'DECREMENT' }),\n        onAddCounter: () => dispatch({ type: 'ADD' }),\n        onSubtractCounter: () => dispatch({ type: 'SUBTRACT' })\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisterComp);\n\n","import React from 'react'\n// import Flashphoner from './flashphoner';\nimport './rstp.css'\nexport default class RstpPlayer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            count: 0\n        };\n    }\n\n    render(props) {\n        return (\n            <div>\n                <h1>player</h1>\n                <iframe className=\"video_iframe\" scrolling=\"no\" width=\"310px\" height=\"160px\" src=\"http://localhost:3888/?rstpUrl=rtsp://170.93.143.139/rtplive/470011e600ef003a004ee33696235daa\"/>\n            </div>\n        );\n    }\n}\n\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {BrowserRouter,Route,Redirect} from 'react-router-dom';\n//components\nimport ButtonCounter from './components/counter.comp';\n// import UsersList from './components/usersList.comp';\nimport LogInComp from './components/login/login.comp';\nimport RegisterComp from './components/register/register.comp';\nimport RstpPlayer from './components/rstpPlayer/rstpPlayer.comp';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <Redirect from=\"/\" exact to=\"/login\"/> */}\n        <Route path=\"/login\" render={() =>  <LogInComp /> }/>\n        <Route path=\"/counter\" render={() =>  <ButtonCounter /> }/>\n        <Route path=\"/register\" render={() =>  <RegisterComp /> }/>\n        <Route path=\"/player\" render={() =>  <RstpPlayer/> }/>\n        {/* <UsersList /> */}\n      </header>\n    </div>\n    </BrowserRouter>\n  );\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//redux\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducer from './store/reducer';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducer);\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}